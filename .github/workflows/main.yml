name: Build and Analyze with SonarQube

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
# Correra en la maquina local
jobs:
  build:
    runs-on: self-hosted


    steps:
      # Paso 1: Checkout del c칩digo fuente
      - name: Checkout code
        uses: actions/checkout@v2

      # Paso 2: Configuraci칩n del JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Paso 3: Cache de paquetes SonarQube
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-cache

      # Paso 4: Cache de dependencias Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      # Paso 5: An치lisis con SonarQube
      - name: SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Necesario para PRs
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

      # Paso 6: Compilaci칩n con Maven
      - name: Build with Maven
        run: mvn clean install

      # Paso 7: Guardar el archivo JAR como un artefacto
      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Aplicacion-JAR
          path: target/*.jar

      # Paso 8: Ejecutar pruebas
      - name: Run Tests
        run: mvn test
